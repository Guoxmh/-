class Teacher implements Cloneable{
    private String job;

    public Teacher(String job) {
        this.job = job;
    }

    public String getJob() {
        return job;
    }

    public void setJob(String job) {
        this.job = job;
    }

    @Override
    public String toString() {
        return "Teacher{" +
                "job='" + job + '\'' +
                '}';
    }
}

class Student implements Cloneable{

    private String str;
    private Integer age;

    private Teacher teacher;

    public String getStr() {
        return str;
    }

    public void setStr(String str) {
        this.str = str;
    }

    public Integer getAge() {
        return age;
    }

    public void setAge(Integer age) {
        this.age = age;
    }

    public Teacher getTeacher() {
        return teacher;
    }

    public void setTeacher(Teacher teacher) {
        this.teacher = teacher;
    }

    public Student(String str, Integer age, Teacher teacher) {
        this.str = str;
        this.age = age;
        this.teacher = teacher;
    }

    @Override
    public String toString() {
        return "Student{" +
                "str='" + str + '\'' +
                ", age=" + age +
                ", teacher=" + teacher +
                '}';
    }

    @Override
    protected Student clone() throws CloneNotSupportedException {
        return (Student) super.clone();
    }


}


public class Test {
    public static void main(String[] args) {
        Teacher teacher = new Teacher("音乐老师");
        Student student1 = new Student("阿凡达", 1, teacher);
        try {
            Student student2 = student1.clone();
            student2.setAge(22);
            student2.setStr("帕金森");
            student2.getTeacher().setJob("哈皮老师");
            System.out.println(student1);
            System.out.println("-----------------------");
            System.out.println(student2);
        } catch (CloneNotSupportedException e) {
            e.printStackTrace();
        }
        //所以实现递归拷贝
        //太难了  所以考虑序列化

        //序列化的原理  把对象变成字节流

public Student cloneObject() throws Exception{
// 使⽤内存流进⾏序列化操作
ByteOutputStream bos = new ByteOutputStream();
ObjectOutputStream oos = new ObjectOutputStream(bos);
oos.writeObject(this);
ByteArrayInputStream bis = new ByteArrayInputStream(bos.getBytes());
ObjectInputStream ois = new ObjectInputStream(bis);
return (Student) ois.readObject();
 }